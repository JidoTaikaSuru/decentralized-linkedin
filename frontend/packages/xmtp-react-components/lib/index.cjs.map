{"version":3,"sources":["../src/components/AddressInput.tsx","../src/components/Avatar.tsx","css-module:./Avatar.module.css#css-module","css-module:./ShortCopySkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/ShortCopySkeletonLoader.tsx","css-module:./AddressInput.module.css#css-module","css-module:./ConversationList.module.css#css-module","css-module:./ConversationPreviewCard.module.css#css-module","css-module:./IconSkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/IconSkeletonLoader.tsx","../src/components/ConversationList.tsx","../src/components/DateDivider.tsx","css-module:./DateDivider.module.css#css-module","../src/components/Messages.tsx","css-module:./MessageSkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/MessageSkeletonLoader.tsx","../src/components/Message.tsx","css-module:./Message.module.css#css-module","../src/components/MessageContent.tsx","../src/components/AttachmentContent.tsx","css-module:./Attachment.module.css#css-module","css-module:./MessageContent.module.css#css-module","../src/components/ReplyContent.tsx","../src/components/ReactionsBar.tsx","css-module:./ReactionsBar.module.css#css-module","../src/components/ReactionsContent.tsx","css-module:./ReactionsContent.module.css#css-module","css-module:./Messages.module.css#css-module","../src/components/IconButton.tsx","css-module:./ButtonLoader.module.css#css-module","../src/components/Loaders/ButtonLoader.tsx","css-module:./IconButton.module.css#css-module","../src/components/MessageInput.tsx","css-module:./MessageInput.module.css#css-module","../src/components/ConversationPreviewCard.tsx","../src/helpers/shortAddress.ts","../src/controllers/ConversationPreview.tsx","../src/controllers/ConversationPreviewList.tsx"],"names":["jsx","jsxs","Fragment","useMemo","format","ContentTypeId","useCallback","useSendMessage","ContentTypeReaction","availableReactionEmojis","forwardRef"],"mappings":"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","sourcesContent":["import {\n  ChevronLeftIcon,\n  InformationCircleIcon,\n} from \"@heroicons/react/24/outline\";\nimport { forwardRef, useCallback } from \"react\";\nimport { Avatar } from \"./Avatar\";\nimport { ShortCopySkeletonLoader } from \"./SkeletonLoaders/ShortCopySkeletonLoader\";\nimport styles from \"./AddressInput.module.css\";\n\nexport type AddressInputProps = {\n  /**\n   * What, if any, ARIA label should be used for the text input\n   */\n  ariaLabel?: string;\n  /**\n   * What, if any, resolved address is there?\n   */\n  resolvedAddress?: {\n    displayAddress: string;\n    walletAddress?: string;\n  };\n  /**\n   * What, if any, subtext is there?\n   */\n  subtext?: string;\n  /**\n   * What are the props associated with the avatar?\n   */\n  avatarUrlProps?: {\n    // What is the avatar url?\n    avatarUrl?: string;\n    // Is the avatar url loading?\n    isLoading?: boolean;\n    // What's the address of this wallet?\n    address?: string;\n  };\n  /**\n   * What, if any, label should be used?\n   */\n  label?: string;\n  /**\n   * What happens on a submit?\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Upon submit, has there been an error?\n   */\n  isError?: boolean;\n  /**\n   * Upon submit, is something loading?\n   */\n  isLoading?: boolean;\n  /**\n   * Is there a tooltip click event that needs to be handled?\n   */\n  onTooltipClick?: () => void;\n  /**\n   * Input Value\n   */\n  value?: string;\n  /**\n   * Is there a left icon click event that needs to be handled?\n   */\n  onLeftIconClick?: () => void;\n};\n\nexport const AddressInput = forwardRef<HTMLInputElement, AddressInputProps>(\n  (\n    {\n      ariaLabel,\n      resolvedAddress,\n      subtext,\n      avatarUrlProps,\n      onChange,\n      isError,\n      isLoading,\n      label,\n      onLeftIconClick,\n      onTooltipClick,\n      value,\n    },\n    ref,\n  ) => {\n    const handleChange = useCallback<\n      React.ChangeEventHandler<HTMLInputElement>\n    >(\n      (event) => {\n        onChange?.(event.target.value);\n      },\n      [onChange],\n    );\n\n    const isResolvedAddress = !!resolvedAddress?.displayAddress;\n\n    return (\n      <div\n        className={`${styles.wrapper} ${\n          isResolvedAddress ? styles.resolved : \"\"\n        }`}>\n        {onLeftIconClick && (\n          <div className={styles.leftIcon}>\n            <ChevronLeftIcon onClick={onLeftIconClick} width={24} />\n          </div>\n        )}\n        <div className={styles.element}>\n          <div className={styles.label}>{label}</div>\n          <Avatar {...avatarUrlProps} />\n          <div className={styles.control}>\n            {isLoading ? (\n              <ShortCopySkeletonLoader lines={1} />\n            ) : resolvedAddress?.displayAddress ? (\n              <div className={styles.resolvedAddress}>\n                <span\n                  className={styles.displayAddress}\n                  data-testid=\"recipient-wallet-address\">\n                  {resolvedAddress.displayAddress}\n                </span>\n                {resolvedAddress.walletAddress && (\n                  <span className={styles.walletAddress}>\n                    {resolvedAddress.walletAddress}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <input\n                data-testid=\"message-to-input\"\n                tabIndex={0}\n                className={styles.input}\n                id=\"address\"\n                type=\"text\"\n                spellCheck=\"false\"\n                autoComplete=\"false\"\n                autoCorrect=\"false\"\n                autoCapitalize=\"off\"\n                onChange={handleChange}\n                value={value}\n                aria-label={ariaLabel}\n                ref={ref}\n              />\n            )}\n            <div\n              className={`${styles.subtext} ${isError ? styles.error : \"\"}`}\n              data-testid=\"message-to-subtext\">\n              {subtext}\n            </div>\n          </div>\n        </div>\n        {onTooltipClick && (\n          <InformationCircleIcon onClick={onTooltipClick} height=\"24\" />\n        )}\n      </div>\n    );\n  },\n);\n\nAddressInput.displayName = \"AddressInput\";\n","import Blockies from \"react-18-blockies\";\nimport styles from \"./Avatar.module.css\";\n\nexport type AvatarProps = {\n  /**\n   * Are we waiting on an avatar url?\n   */\n  isLoading?: boolean;\n  /**\n   * What, if any, avatar url is there?\n   */\n  url?: string;\n  /**\n   * What is the address associated with this avatar?\n   */\n  address?: string;\n};\n\nexport const Avatar: React.FC<AvatarProps> = ({ url, isLoading, address }) => {\n  if (isLoading) {\n    return <div className={styles.loading} />;\n  }\n\n  if (url) {\n    return <img className={styles.avatar} src={url} alt={address} />;\n  }\n\n  if (!address) {\n    return <div className={styles.avatar} />;\n  }\n\n  return (\n    <Blockies\n      data-testid=\"avatar\"\n      seed={address || \"\"}\n      scale={5}\n      size={8}\n      className={styles.blockies}\n    />\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/Avatar.module.css\"; export default {\"loading\":\"_loading_652o7_6 pulse\",\"avatar\":\"_avatar_652o7_14\",\"blockies\":\"_blockies_652o7_21\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/ShortCopySkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_ng5ay_1 pulse\",\"element\":\"_element_ng5ay_6\",\"element1Line\":\"_element1Line_ng5ay_11\",\"element2Lines\":\"_element2Lines_ng5ay_16\"}","import styles from \"./ShortCopySkeletonLoader.module.css\";\n\nexport const ShortCopySkeletonLoader = ({ lines = 1 }) => (\n  <div role=\"status\" className={styles.wrapper}>\n    {lines === 1 ? (\n      <div className={`${styles.element} ${styles.element1Line}`} />\n    ) : (\n      <div className={styles.element2Lines}>\n        <div className={styles.element} />\n        <div className={styles.element} />\n      </div>\n    )}\n  </div>\n);\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/AddressInput.module.css\"; export default {\"wrapper\":\"_wrapper_82p7z_6\",\"resolved\":\"_resolved_82p7z_15\",\"element\":\"_element_82p7z_20\",\"label\":\"_label_82p7z_26 text-sm\",\"control\":\"_control_82p7z_32\",\"input\":\"_input_82p7z_40 text-md text-sm\",\"resolvedAddress\":\"_resolvedAddress_82p7z_54\",\"displayAddress\":\"_displayAddress_82p7z_62\",\"walletAddress\":\"_walletAddress_82p7z_67\",\"subtext\":\"_subtext_82p7z_73\",\"error\":\"_error_82p7z_80\",\"leftIcon\":\"_leftIcon_82p7z_90\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/ConversationList.module.css\"; export default {\"loading\":\"_loading_1s609_6\",\"empty\":\"_empty_1s609_13\",\"wrapper\":\"_wrapper_1s609_18\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/ConversationPreviewCard.module.css\"; export default {\"wrapper\":\"_wrapper_9fip8_1\",\"selected\":\"_selected_9fip8_10\",\"loading\":\"_loading_9fip8_14\",\"element\":\"_element_9fip8_18\",\"domain\":\"_domain_9fip8_26 text-sm\",\"address\":\"_address_9fip8_35 text-md\",\"message\":\"_message_9fip8_44 text-md\",\"time\":\"_time_9fip8_56 text-xs\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/IconSkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_2nuo1_1 pulse\",\"element\":\"_element_2nuo1_7\"}","import styles from \"./IconSkeletonLoader.module.css\";\n\nexport const IconSkeletonLoader = () => (\n  <div role=\"status\" className={styles.wrapper}>\n    <div className={styles.element} />\n  </div>\n);\n","import { Avatar } from \"./Avatar\";\nimport styles from \"./ConversationList.module.css\";\nimport previewStyles from \"./ConversationPreviewCard.module.css\";\nimport { IconSkeletonLoader } from \"./SkeletonLoaders/IconSkeletonLoader\";\nimport { ShortCopySkeletonLoader } from \"./SkeletonLoaders/ShortCopySkeletonLoader\";\n\nexport type ConversationListProps = {\n  /**\n   * What conversations should we render?\n   */\n  conversations?: React.ReactNode[];\n  /**\n   * Are we waiting on anything loading?\n   */\n  isLoading?: boolean;\n  /**\n   * What should we render when there are no conversations?\n   */\n  renderEmpty?: React.ReactNode;\n};\n\nconst DefaultEmptyMessage: React.FC = () => <div>No conversations!</div>;\n\nexport const ConversationList: React.FC<ConversationListProps> = ({\n  conversations = [],\n  isLoading,\n  renderEmpty = <DefaultEmptyMessage />,\n}) => {\n  if (isLoading && !conversations.length) {\n    return (\n      <div className={previewStyles.wrapper}>\n        <Avatar isLoading />\n        <div className={previewStyles.element}>\n          <ShortCopySkeletonLoader lines={2} />\n        </div>\n        <IconSkeletonLoader />\n      </div>\n    );\n  }\n\n  if (!conversations.length && !isLoading) {\n    return <div className={styles.empty}>{renderEmpty}</div>;\n  }\n\n  return (\n    <div className={styles.wrapper} data-testid=\"conversations-list-panel\">\n      {conversations}\n    </div>\n  );\n};\n","import { format } from \"date-fns\";\nimport styles from \"./DateDivider.module.css\";\n\nexport type DateDividerProps = {\n  /**\n   * What date should be displayed in the divider?\n   */\n  date: Date;\n};\n\nexport const DateDivider: React.FC<DateDividerProps> = ({ date }) => (\n  <div className={styles.wrapper}>\n    <div className={styles.date} title={date.toDateString()}>\n      {format(date, \"PPP\")}\n    </div>\n  </div>\n);\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/DateDivider.module.css\"; export default {\"wrapper\":\"_wrapper_gcqk3_1\",\"date\":\"_date_gcqk3_16\"}","import { isAfter, isBefore, isSameDay } from \"date-fns\";\nimport { Fragment, useMemo } from \"react\";\nimport {\n  getReadReceipt,\n  type CachedConversation,\n  type CachedMessage,\n} from \"@xmtp/react-sdk\";\nimport { MessageSkeletonLoader } from \"./SkeletonLoaders/MessageSkeletonLoader\";\nimport { Message } from \"./Message\";\nimport { DateDivider } from \"./DateDivider\";\nimport styles from \"./Messages.module.css\";\n\nexport type MessagesProps = {\n  conversation: CachedConversation;\n  /**\n   * What's the client's wallet address?\n   */\n  clientAddress?: string;\n  /**\n   * Are the messages loading?\n   */\n  isLoading?: boolean;\n  /**\n   * What messages should be displayed?\n   */\n  messages?: CachedMessage[];\n};\n\n// TODO: account for messages sent at the same time\nconst hasMessageReadAfter = (\n  messages: CachedMessage[],\n  afterSent: Date,\n  readReceipt: Date,\n) =>\n  messages.some(\n    (message) =>\n      isAfter(message.sentAt, afterSent) &&\n      isBefore(message.sentAt, readReceipt),\n  );\n\nexport const Messages: React.FC<MessagesProps> = ({\n  clientAddress = \"\",\n  conversation,\n  isLoading = false,\n  messages = [],\n}) => {\n  const outgoingMessages = useMemo(\n    () => messages.filter((message) => message.senderAddress === clientAddress),\n    [messages, clientAddress],\n  );\n\n  if (isLoading && !messages.length) {\n    return (\n      <div className={styles.loading}>\n        {Array.from({ length: 3 }).map((_, idx) => (\n          <Fragment key={idx}>\n            <MessageSkeletonLoader incoming={false} /> <MessageSkeletonLoader />\n          </Fragment>\n        ))}\n      </div>\n    );\n  }\n\n  const renderedDates: Date[] = [];\n  const readReceipt = getReadReceipt(conversation);\n\n  return (\n    <div data-testid=\"message-tile-container\" className={styles.wrapper}>\n      {messages.map((message, idx, filteredMessages) => {\n        if (renderedDates.length === 0) {\n          renderedDates.push(message.sentAt);\n        }\n        const lastRenderedDate = renderedDates.at(-1) as Date;\n        const isIncoming = message.senderAddress !== clientAddress;\n        const isOutgoing = message.senderAddress === clientAddress;\n        const isFirstMessage = idx === 0;\n        const isLastMessage = idx === filteredMessages.length - 1;\n        const isSameDate = isSameDay(lastRenderedDate, message.sentAt);\n        const shouldDisplayDate =\n          isFirstMessage || isLastMessage || !isSameDate;\n\n        if (shouldDisplayDate && !isLastMessage) {\n          renderedDates.push(message.sentAt);\n        }\n\n        // determine if this message should display a read receipt, which\n        // we only want to display on the last read outgoing message\n        const isRead =\n          // conversation must have a valid read receipt, and...\n          readReceipt &&\n          // this message must be outgoing, and...\n          isOutgoing &&\n          // this message must be sent before the read receipt, and...\n          isBefore(message.sentAt, readReceipt) &&\n          // this message is the last message, or...\n          (isLastMessage ||\n            // the next outgoing message was sent after the read receipt\n            !hasMessageReadAfter(\n              outgoingMessages,\n              message.sentAt,\n              readReceipt,\n            ));\n\n        return (\n          <Fragment key={message.id}>\n            {shouldDisplayDate && (\n              <DateDivider date={renderedDates.at(-1) as Date} />\n            )}\n            <Message\n              key={message.id}\n              conversation={conversation}\n              message={message}\n              isIncoming={isIncoming}\n              isRead={isRead}\n            />\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/MessageSkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_igutw_1 pulse\",\"section\":\"_section_igutw_5\",\"sectionRight\":\"_sectionRight_igutw_11\",\"element\":\"_element_igutw_16\",\"elementSmall\":\"_elementSmall_igutw_22\",\"elementMedium\":\"_elementMedium_igutw_26\",\"elementLarge\":\"_elementLarge_igutw_30\",\"elementLast\":\"_elementLast_igutw_34\"}","import styles from \"./MessageSkeletonLoader.module.css\";\n\nexport const MessageSkeletonLoader = ({ incoming = true }) => (\n  <div role=\"status\" className={styles.wrapper}>\n    {incoming ? (\n      <div className={styles.section}>\n        <div className={`${styles.element} ${styles.elementSmall}`} />\n        <div className={`${styles.element} ${styles.elementLarge}`} />\n        <div className={`${styles.element} ${styles.elementMedium}`} />\n        <div className={`${styles.element} ${styles.elementLast}`} />\n      </div>\n    ) : (\n      <div className={`${styles.section} ${styles.sectionRight}`}>\n        <div className={`${styles.element} ${styles.elementSmall}`} />\n        <div className={`${styles.element} ${styles.elementLarge}`} />\n        <div className={`${styles.element} ${styles.elementMedium}`} />\n        <div className={`${styles.element} ${styles.elementLast}`} />\n      </div>\n    )}\n  </div>\n);\n","import { format } from \"date-fns\";\nimport { ContentTypeId } from \"@xmtp/react-sdk\";\nimport type { CachedConversation, CachedMessage } from \"@xmtp/react-sdk\";\nimport { ContentTypeReply } from \"@xmtp/content-type-reply\";\nimport styles from \"./Message.module.css\";\nimport { MessageContent } from \"./MessageContent\";\nimport { ReplyContent } from \"./ReplyContent\";\nimport { ReactionsBar } from \"./ReactionsBar\";\nimport { ReactionsContent } from \"./ReactionsContent\";\n\nexport type MessageProps = {\n  conversation: CachedConversation;\n  /**\n   * The message to display\n   */\n  message: CachedMessage;\n  /**\n   * Is this an incoming message?\n   */\n  isIncoming?: boolean;\n  isRead?: boolean;\n};\n\nexport const Message: React.FC<MessageProps> = ({\n  conversation,\n  message,\n  isIncoming,\n  isRead,\n}) => {\n  const contentType = ContentTypeId.fromString(message.contentType);\n  return (\n    <div\n      className={`${styles.wrapper} ${styles[isIncoming ? \"left\" : \"right\"]}`}>\n      {contentType.sameAs(ContentTypeReply) ? (\n        <ReplyContent message={message} isIncoming={isIncoming} />\n      ) : (\n        <MessageContent message={message} isIncoming={isIncoming} />\n      )}\n      <div className={styles.time} title={message.sentAt.toLocaleString()}>\n        {isRead && <span className={styles.readReceipt}>Read</span>}\n        <span>{format(message.sentAt, \"h:mm a\")}</span>\n      </div>\n      <div className={styles.reactions}>\n        <ReactionsBar conversation={conversation} message={message} />\n      </div>\n      <ReactionsContent conversation={conversation} message={message} />\n    </div>\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/Message.module.css\"; export default {\"wrapper\":\"_wrapper_hnmk8_1\",\"left\":\"_left_hnmk8_11\",\"right\":\"_right_hnmk8_15\",\"content\":\"_content_hnmk8_19\",\"time\":\"_time_hnmk8_27\",\"readReceipt\":\"_readReceipt_hnmk8_36\",\"reactions\":\"_reactions_hnmk8_40\"}","import { ContentTypeId, ContentTypeText } from \"@xmtp/react-sdk\";\nimport type { CachedMessage } from \"@xmtp/react-sdk\";\nimport {\n  ContentTypeAttachment,\n  ContentTypeRemoteAttachment,\n} from \"@xmtp/content-type-remote-attachment\";\nimport { AttachmentContent } from \"./AttachmentContent\";\nimport styles from \"./MessageContent.module.css\";\n\nexport type MessageContentProps = {\n  message: CachedMessage;\n  isIncoming?: boolean;\n  isRepliedTo?: boolean;\n};\n\nexport const MessageContent: React.FC<MessageContentProps> = ({\n  message,\n  isIncoming,\n  isRepliedTo,\n}) => {\n  const contentType = ContentTypeId.fromString(message.contentType);\n  let content: any;\n\n  // text messages\n  if (contentType.sameAs(ContentTypeText)) {\n    if (typeof message.content === \"string\")\n      content =\n        typeof message.content === \"string\" ? message.content : undefined;\n  }\n\n  // attachment messages\n  if (\n    contentType.sameAs(ContentTypeAttachment) ||\n    contentType.sameAs(ContentTypeRemoteAttachment)\n  ) {\n    content = <AttachmentContent message={message} />;\n  }\n\n  return (\n    <div\n      className={`${styles.content} ${styles[isIncoming ? \"left\" : \"right\"]} ${\n        isRepliedTo ? styles.original : \"\"\n      }`}\n      data-testid=\"message-tile-text\">\n      {content ??\n        message.contentFallback ??\n        \"This content is not supported by this client\"}\n    </div>\n  );\n};\n","import type { Attachment } from \"@xmtp/content-type-remote-attachment\";\nimport type { CachedMessage } from \"@xmtp/react-sdk\";\nimport { useAttachment } from \"@xmtp/react-sdk\";\nimport styles from \"./Attachment.module.css\";\n\nexport type AttachmentProps = {\n  message: CachedMessage;\n};\n\n/**\n * Creating object URLs from blobs is non-deterministic, so we store the\n * generated URLs in a cache so that they can be reused, which results in\n * a more consistent rendering of images/data and less memory usage.\n */\nconst blobCache = new WeakMap<Uint8Array, string>();\n\nconst getBlobURL = (attachment: Attachment) => {\n  if (!blobCache.get(attachment.data)) {\n    blobCache.set(\n      attachment.data,\n      URL.createObjectURL(\n        new Blob([Buffer.from(attachment.data)], {\n          type: attachment.mimeType,\n        }),\n      ),\n    );\n  }\n\n  return blobCache.get(attachment.data)!;\n};\n\nexport const AttachmentContent: React.FC<AttachmentProps> = ({ message }) => {\n  const { attachment, status } = useAttachment(message);\n\n  if (status === \"error\") {\n    return \"Unable to load attachment\";\n  }\n\n  if (status === \"loading\" || !attachment) {\n    return \"Loading...\";\n  }\n\n  const blobURL = getBlobURL(attachment);\n\n  if (attachment.mimeType.startsWith(\"image/\")) {\n    return (\n      <div className={styles.attachment}>\n        <img src={blobURL} alt=\"\" />\n      </div>\n    );\n  }\n\n  if (attachment.mimeType.startsWith(\"audio/\")) {\n    return (\n      // eslint-disable-next-line jsx-a11y/media-has-caption\n      <audio controls src={blobURL}>\n        <a href={blobURL}>Download instead</a>\n      </audio>\n    );\n  }\n\n  if (attachment.mimeType.startsWith(\"video/\")) {\n    return (\n      // eslint-disable-next-line jsx-a11y/media-has-caption\n      <video controls autoPlay>\n        <source src={blobURL} type=\"video/mp4\" />\n        Video messages not supported.\n      </video>\n    );\n  }\n\n  return (\n    <div>\n      <a href={blobURL} target=\"_blank\" rel=\"noopener noreferrer\">\n        {attachment.filename}\n      </a>\n    </div>\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/Attachment.module.css\"; export default {\"attachment\":\"_attachment_m6zqf_1\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/MessageContent.module.css\"; export default {\"content\":\"_content_9xkgj_1\",\"left\":\"_left_9xkgj_10\",\"right\":\"_right_9xkgj_15\",\"original\":\"_original_9xkgj_21\"}","import type { CachedMessage } from \"@xmtp/react-sdk\";\nimport { ContentTypeId, useReply } from \"@xmtp/react-sdk\";\nimport type { Reply } from \"@xmtp/content-type-reply\";\nimport { MessageContent } from \"./MessageContent\";\n\nexport type ReplyProps = {\n  message: CachedMessage;\n  isIncoming?: boolean;\n};\n\nexport const ReplyContent: React.FC<ReplyProps> = ({ message, isIncoming }) => {\n  const { originalMessage } = useReply(message);\n\n  const reply = message.content as Reply;\n  const replyMessage = {\n    ...message,\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    content: reply.content,\n    contentType: new ContentTypeId(reply.contentType).toString(),\n  } satisfies CachedMessage;\n\n  return (\n    <>\n      <div>\n        {originalMessage ? (\n          <MessageContent\n            message={originalMessage}\n            isIncoming={isIncoming}\n            isRepliedTo\n          />\n        ) : (\n          \"Loading original message...\"\n        )}\n      </div>\n      <div>\n        <MessageContent message={replyMessage} isIncoming={isIncoming} />\n      </div>\n    </>\n  );\n};\n","import { useSendMessage } from \"@xmtp/react-sdk\";\nimport type { CachedMessage, CachedConversation } from \"@xmtp/react-sdk\";\nimport { useCallback } from \"react\";\nimport {\n  ContentTypeReaction,\n  type Reaction,\n} from \"@xmtp/content-type-reaction\";\nimport styles from \"./ReactionsBar.module.css\";\n\nexport type ReactionsBarProps = {\n  conversation: CachedConversation;\n  message: CachedMessage;\n};\n\nconst availableReactionEmojis = [\"👍\", \"👎\", \"❤️\"];\n\nexport const ReactionsBar: React.FC<ReactionsBarProps> = ({\n  conversation,\n  message,\n}) => {\n  const { sendMessage } = useSendMessage();\n  const handleClick = useCallback(\n    (emoji: string) => {\n      void sendMessage<Reaction>(\n        conversation,\n        {\n          content: emoji,\n          schema: \"unicode\",\n          reference: message.xmtpID,\n          action: \"added\",\n        },\n        ContentTypeReaction,\n      );\n    },\n    [conversation, message.xmtpID, sendMessage],\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {availableReactionEmojis.map((emoji) => (\n        <button\n          type=\"button\"\n          key={emoji}\n          className={styles.option}\n          onClick={() => handleClick(emoji)}>\n          <span className={styles.emoji}>{emoji}</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/ReactionsBar.module.css\"; export default {\"wrapper\":\"_wrapper_l3px9_1\",\"option\":\"_option_l3px9_11\"}","import {\n  type CachedConversation,\n  type CachedMessage,\n  useSendMessage,\n  useClient,\n  useReactions,\n} from \"@xmtp/react-sdk\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Reaction } from \"@xmtp/content-type-reaction\";\nimport { ContentTypeReaction } from \"@xmtp/content-type-reaction\";\nimport styles from \"./ReactionsContent.module.css\";\n\nexport type ReactionsContentProps = {\n  conversation: CachedConversation;\n  message: CachedMessage;\n};\n\nconst availableReactionEmojis = [\"👍\", \"👎\", \"❤️\"];\n\nexport const ReactionsContent: React.FC<ReactionsContentProps> = ({\n  conversation,\n  message,\n}) => {\n  const { client } = useClient();\n  const { sendMessage } = useSendMessage();\n  const reactions = useReactions(message);\n\n  const emojiReactions = useMemo(\n    () =>\n      reactions\n        .filter((reaction) => reaction.schema === \"unicode\")\n        .reduce(\n          (acc, reaction) => {\n            const count = (acc?.[reaction.content]?.count ?? 0) + 1;\n            const senderAddresses =\n              acc?.[reaction.content]?.senderAddresses ?? [];\n            return {\n              ...acc,\n              [reaction.content]: {\n                count,\n                senderAddresses: [...senderAddresses, reaction.senderAddress],\n              },\n            };\n          },\n          {} as Record<\n            string,\n            {\n              count: number;\n              senderAddresses: string[];\n            }\n          >,\n        ),\n    [reactions],\n  );\n\n  const emojiCount = useCallback(\n    (emoji: string) => emojiReactions[emoji]?.count ?? 0,\n    [emojiReactions],\n  );\n\n  const handleClick = useCallback(\n    (emoji: string) => {\n      const hasReacted = emojiReactions[emoji].senderAddresses.includes(\n        client?.address ?? \"\",\n      );\n      void sendMessage<Reaction>(\n        conversation,\n        {\n          content: emoji,\n          schema: \"unicode\",\n          reference: message.xmtpID,\n          action: hasReacted ? \"removed\" : \"added\",\n        },\n        ContentTypeReaction,\n      );\n    },\n    [\n      client?.address,\n      conversation,\n      emojiReactions,\n      message.xmtpID,\n      sendMessage,\n    ],\n  );\n\n  return (\n    reactions.length > 0 && (\n      <div className={styles.wrapper}>\n        {availableReactionEmojis.map((emoji) => {\n          const count = emojiCount(emoji);\n          return count > 0 ? (\n            <button\n              type=\"button\"\n              key={emoji}\n              className={`${styles.option} ${styles.active}`}\n              onClick={() => handleClick(emoji)}>\n              <span className={styles.emoji}>{emoji}</span>\n              <span className={styles.count}>{count}</span>\n            </button>\n          ) : null;\n        })}\n      </div>\n    )\n  );\n};\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/ReactionsContent.module.css\"; export default {\"wrapper\":\"_wrapper_1i67j_1\",\"option\":\"_option_1i67j_8\",\"count\":\"_count_1i67j_23\",\"active\":\"_active_1i67j_28\"}","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/Messages.module.css\"; export default {\"wrapper\":\"_wrapper_9g5he_1\",\"loading\":\"_loading_9g5he_8\",\"beginning\":\"_beginning_9g5he_15\"}","import { PlusCircleIcon } from \"@heroicons/react/24/outline\";\nimport { ButtonLoader } from \"./Loaders/ButtonLoader\";\nimport styles from \"./IconButton.module.css\";\n\nexport type IconButtonProps = {\n  /**\n   * What are the button contents?\n   */\n  label: React.ReactNode;\n  /**\n   * Is this a round or message shape of the button?\n   */\n  variant?: \"primary\" | \"secondary\";\n  /**\n   * How large is this button?\n   */\n  size?: \"small\" | \"large\";\n  /**\n   * Should the button display a loading state?\n   */\n  isLoading?: boolean;\n  /**\n   * Should the button be disabled?\n   */\n  isDisabled?: boolean;\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n  /**\n   * What should the screen reader text show?\n   */\n  srText?: string;\n  /**\n   * What is the test id associated with this button?\n   */\n  testId?: string;\n};\n\n/**\n * Icon-only button component\n */\nexport const IconButton: React.FC<IconButtonProps> = ({\n  label = <PlusCircleIcon width=\"24\" color=\"white\" />,\n  variant = \"primary\",\n  isLoading = false,\n  isDisabled = false,\n  size = \"large\",\n  srText,\n  onClick,\n  testId,\n}) => (\n  <button\n    data-testid={testId}\n    type=\"button\"\n    onClick={onClick}\n    disabled={isDisabled}\n    className={`${styles.wrapper} ${styles[variant]} ${\n      isDisabled ? styles.disabled : \"\"\n    }`}\n    aria-label={srText}>\n    <div>\n      {isLoading ? <ButtonLoader color=\"primary\" size={size} /> : label}\n    </div>\n  </button>\n);\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/Loaders/ButtonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_133pc_3\",\"light\":\"_light_133pc_7\",\"dark\":\"_dark_133pc_11\",\"element\":\"_element_133pc_15 spin\",\"elementSmall\":\"_elementSmall_133pc_22\",\"elementLarge\":\"_elementLarge_133pc_28\"}","import styles from \"./ButtonLoader.module.css\";\n\nexport type ButtonLoaderProps = {\n  /**\n   * What color should the loader/spinner be?\n   */\n  color?: \"primary\" | \"secondary\";\n  /**\n   * How large is this button?\n   */\n  size?: \"small\" | \"large\";\n};\n\n/**\n * Primary UI component for user interaction\n */\nexport const ButtonLoader: React.FC<ButtonLoaderProps> = ({\n  size,\n  color = \"primary\",\n}) => (\n  <div className={styles.wrapper}>\n    <div\n      className={`${styles.element} ${\n        color === \"primary\" ? styles.light : styles.dark\n      } ${size === \"small\" ? styles.elementSmall : styles.elementLarge}`}\n    />\n  </div>\n);\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/IconButton.module.css\"; export default {\"wrapper\":\"_wrapper_7iqve_1\",\"disabled\":\"_disabled_7iqve_19\",\"primary\":\"_primary_7iqve_28\",\"secondary\":\"_secondary_7iqve_36\"}","import type { ChangeEvent, KeyboardEvent } from \"react\";\nimport {\n  useCallback,\n  forwardRef,\n  useImperativeHandle,\n  useState,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\nimport { ArrowUpIcon } from \"@heroicons/react/24/solid\";\nimport { IconButton } from \"./IconButton\";\nimport styles from \"./MessageInput.module.css\";\n\nexport type MessageInputProps = {\n  /**\n   * Is the CTA button disabled?\n   */\n  isDisabled?: boolean;\n  /**\n   * What happens on a submit?\n   */\n  onSubmit?: (msg: string) => Promise<void>;\n  /**\n   * What, if any, placeholder should we use for the input?\n   */\n  placeholder?: string;\n  /**\n   * What, if any, screen reader text should be used for the submit button\n   */\n  submitSrText?: string;\n};\n\nconst MIN_TEXTAREA_HEIGHT = 32;\n\nexport const MessageInput = forwardRef<HTMLTextAreaElement, MessageInputProps>(\n  ({ isDisabled, onSubmit, placeholder, submitSrText }, ref) => {\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n    // make external ref point to internal ref\n    useImperativeHandle<HTMLTextAreaElement | null, HTMLTextAreaElement | null>(\n      ref,\n      () => textAreaRef.current,\n    );\n    const [value, setValue] = useState(\"\");\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement>) =>\n      setValue(event.target.value);\n\n    const handleKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === \"Enter\" && !event.shiftKey) {\n          event.preventDefault();\n          if (value) {\n            void onSubmit?.(value);\n            setValue(\"\");\n          }\n        }\n      },\n      [onSubmit, value],\n    );\n\n    const handleClick = useCallback(() => {\n      if (value) {\n        void onSubmit?.(value);\n        setValue(\"\");\n      }\n    }, [onSubmit, value]);\n\n    useLayoutEffect(() => {\n      if (textAreaRef?.current?.value) {\n        const currentScrollHeight = textAreaRef?.current.scrollHeight;\n        textAreaRef.current.style.height = `${Math.max(\n          currentScrollHeight,\n          MIN_TEXTAREA_HEIGHT,\n        )}px`;\n      } else if (textAreaRef?.current) {\n        textAreaRef.current.style.height = `${MIN_TEXTAREA_HEIGHT}px`;\n      }\n    }, [value]);\n\n    return (\n      <div>\n        {placeholder && (\n          <label htmlFor=\"chat\" className={styles.label}>\n            {placeholder}\n          </label>\n        )}\n        <div className={styles.wrapper}>\n          <textarea\n            name=\"chat\"\n            data-testid=\"message-input\"\n            onChange={onChange}\n            onKeyDown={handleKeyDown}\n            ref={textAreaRef}\n            rows={1}\n            className={styles.input}\n            placeholder={placeholder}\n            value={value}\n            disabled={isDisabled}\n          />\n          <IconButton\n            testId=\"message-input-submit\"\n            variant=\"secondary\"\n            label={<ArrowUpIcon color=\"white\" width=\"20\" />}\n            srText={submitSrText}\n            onClick={handleClick}\n            isDisabled={!value || isDisabled}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nMessageInput.displayName = \"MessageInput\";\n","import \"/Users/adoll/projects/decentralized-linkedin/frontend/packages/xmtp-react-components/src/components/MessageInput.module.css\"; export default {\"label\":\"_label_1wlh2_1 visually-hidden\",\"wrapper\":\"_wrapper_1wlh2_5\",\"input\":\"_input_1wlh2_19\"}","import type { KeyboardEvent } from \"react\";\nimport { useCallback } from \"react\";\nimport { formatDistanceToNowStrict } from \"date-fns\";\nimport {\n  type CachedConversation,\n  type CachedMessage,\n  getAttachment,\n} from \"@xmtp/react-sdk\";\nimport { Avatar } from \"./Avatar\";\nimport styles from \"./ConversationPreviewCard.module.css\";\nimport { shortAddress } from \"../helpers/shortAddress\";\nimport { Link } from \"react-router-dom\";\n\nexport type ConversationPreviewCardProps = {\n  /**\n   * Conversation to preview\n   */\n  conversation: CachedConversation;\n  /**\n   * What is the last message of this conversation?\n   */\n  lastMessage?: CachedMessage;\n  /**\n   * What happens on message click?\n   */\n  onClick?: (conversation: CachedConversation) => void;\n  /**\n   * Is conversation selected?\n   */\n  isSelected?: boolean;\n};\n\nexport const ConversationPreviewCard: React.FC<\n  ConversationPreviewCardProps\n> = ({ conversation, onClick, isSelected, lastMessage }) => {\n  const attachment = lastMessage ? getAttachment(lastMessage) : undefined;\n  let content: any;\n  if (attachment) {\n    content = attachment.filename;\n  } else if (typeof lastMessage?.content === \"string\") {\n    content = lastMessage.content;\n  } else if (lastMessage?.contentFallback) {\n    content = lastMessage.contentFallback;\n  }\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Enter\") {\n        onClick?.(conversation);\n      }\n    },\n    [conversation, onClick],\n  );\n\n  const handleClick = useCallback(() => {\n    onClick?.(conversation);\n  }, [conversation, onClick]);\n\n  return (\n    <div\n      className={`${styles.wrapper} ${isSelected ? styles.selected : \"\"}`}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      onClick={handleClick}>\n      <Link to={`/profile/${conversation.peerAddress}`}>\n      <Avatar address={conversation.peerAddress} />\n      </Link>\n      <div className={styles.element}>\n        <div className={styles.address}>\n          {shortAddress(conversation.peerAddress)}\n        </div>\n        <div className={styles.message}>{content}</div>\n      </div>\n      <div className={styles.time}>\n        {lastMessage?.sentAt &&\n          `${formatDistanceToNowStrict(lastMessage.sentAt)} ago`}\n      </div>\n    </div>\n  );\n};\n","/**\n * Shorten a wallet address that is more than 10 characters.\n * Address must start with `0x`.\n */\nexport const shortAddress = (addr: string): string =>\n  addr.length > 10 && addr.startsWith(\"0x\")\n    ? `${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`\n    : addr;\n","import type { CachedConversation, CachedMessage } from \"@xmtp/react-sdk\";\nimport { useCallback } from \"react\";\nimport { ConversationPreviewCard } from \"../components/ConversationPreviewCard\";\n\nexport type ConversationPreviewProps = {\n  /**\n   * Conversation to preview\n   */\n  conversation: CachedConversation;\n  /**\n   * Is conversation selected?\n   */\n  isSelected?: boolean;\n  /**\n   * What happens when you click on the conversation?\n   */\n  onClick?: (conversation: CachedConversation) => void;\n  /**\n   * Preview text to display\n   */\n  lastMessage?: CachedMessage;\n};\n\n/**\n * This component fetches the most recent conversation message and uses it to\n * render a conversation preview.\n */\nexport const ConversationPreview: React.FC<ConversationPreviewProps> = ({\n  conversation,\n  isSelected,\n  onClick,\n  lastMessage,\n}) => {\n  const handlePreviewClick = useCallback(() => {\n    onClick?.(conversation);\n  }, [conversation, onClick]);\n\n  return (\n    <ConversationPreviewCard\n      conversation={conversation}\n      isSelected={isSelected}\n      onClick={handlePreviewClick}\n      lastMessage={lastMessage}\n    />\n  );\n};\n","import type { CachedConversation } from \"@xmtp/react-sdk\";\nimport { ConversationPreview } from \"./ConversationPreview\";\nimport type { ConversationListProps } from \"../components/ConversationList\";\nimport { ConversationList } from \"../components/ConversationList\";\n\nexport type ConversationPreviewListProps = Pick<\n  ConversationListProps,\n  \"isLoading\" | \"renderEmpty\"\n> & {\n  /**\n   * What conversations should we render?\n   */\n  conversations?: CachedConversation[];\n  /**\n   * What happens when a conversation is clicked?\n   */\n  onConversationClick?: (conversation: CachedConversation) => void;\n  /**\n   * What, if any, conversation is selected\n   */\n  selectedConversation?: CachedConversation;\n};\n\n/**\n * This component sorts conversations by most recent, then lists them as\n * conversation previews, which include the conversation's first message.\n */\nexport const ConversationPreviewList: React.FC<\n  ConversationPreviewListProps\n> = ({\n  conversations = [],\n  isLoading,\n  onConversationClick,\n  renderEmpty,\n  selectedConversation,\n}) => {\n  const conversationPreviews = conversations.map((conversation) => (\n    <ConversationPreview\n      key={conversation.topic}\n      conversation={conversation}\n      isSelected={conversation.topic === selectedConversation?.topic}\n      onClick={onConversationClick}\n    />\n  ));\n  return (\n    <ConversationList\n      conversations={conversationPreviews}\n      isLoading={isLoading}\n      renderEmpty={renderEmpty}\n    />\n  );\n};\n"]}